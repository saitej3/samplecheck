Q: Write a Yacc program that takes a Boolean expression as input and produces the truth value of the expression.

Y3.l

%{
#include <stdlib.h>
void yyerror(char *);
#include"y.tab.h"
%}

%%

"T"       { yylval = 1; return boolean; }
"F"       { yylval = 0; return boolean; }
"!F"      { yylval = 1; return boolean; }
"!T"      { yylval = 0; return boolean; }

[+*n]     return *yytext;
"("        return *yytext;
 ")"       return *yytext;
[\t]       ;/* .... */

.            yyerror("....");

%%

int yywrap(void) {
     return 1;
}

Y3.y

%{
#include <stdlib.h>
int yylex(void);
void yyerror(char *);
%}

%token boolean
%left '+' '-'
%left '*'
%left '(' ')'
%%

program:
    program expr '\n' { if ($2 >= 1)
                printf("TRUE");
            else
                printf("FALSE");
              }
  |
  ;

expr:
    boolean { $$ = $1; }
  | expr '*' expr { $$ = $1 * $3; }
  | expr '+' expr { $$ = $1 + $3; }
  | '(' expr ')' { $$ = $2; }
  ;

%%

void yyerror(char *s) {     
    printf("%s\n", s);
}

int main(void) {
    yyparse();
    return 0;
}

How To Run:
lex Y3.l
yacc -d Y3.y
cc  -c lex.yy.c y.tab.c
cc -o a.out lex.yy.o y.tab.o -lfl
./a.out
 
Example:
T*T+T*F
TRUE
T+T
TRUE